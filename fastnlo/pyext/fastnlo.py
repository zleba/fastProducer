# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fastnlo', [dirname(__file__)])
        except ImportError:
            import _fastnlo
            return _fastnlo
        if fp is not None:
            try:
                _mod = imp.load_module('_fastnlo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fastnlo = swig_import_helper()
    del swig_import_helper
else:
    import _fastnlo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastnlo.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _fastnlo.SwigPyIterator_value(self)
    def incr(self, n = 1): return _fastnlo.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _fastnlo.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _fastnlo.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _fastnlo.SwigPyIterator_equal(self, *args)
    def copy(self): return _fastnlo.SwigPyIterator_copy(self)
    def next(self): return _fastnlo.SwigPyIterator_next(self)
    def __next__(self): return _fastnlo.SwigPyIterator___next__(self)
    def previous(self): return _fastnlo.SwigPyIterator_previous(self)
    def advance(self, *args): return _fastnlo.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _fastnlo.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _fastnlo.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _fastnlo.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _fastnlo.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _fastnlo.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _fastnlo.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _fastnlo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vectori___nonzero__(self)
    def __bool__(self): return _fastnlo.vectori___bool__(self)
    def __len__(self): return _fastnlo.vectori___len__(self)
    def pop(self): return _fastnlo.vectori_pop(self)
    def __getslice__(self, *args): return _fastnlo.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vectori___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vectori_append(self, *args)
    def empty(self): return _fastnlo.vectori_empty(self)
    def size(self): return _fastnlo.vectori_size(self)
    def clear(self): return _fastnlo.vectori_clear(self)
    def swap(self, *args): return _fastnlo.vectori_swap(self, *args)
    def get_allocator(self): return _fastnlo.vectori_get_allocator(self)
    def begin(self): return _fastnlo.vectori_begin(self)
    def end(self): return _fastnlo.vectori_end(self)
    def rbegin(self): return _fastnlo.vectori_rbegin(self)
    def rend(self): return _fastnlo.vectori_rend(self)
    def pop_back(self): return _fastnlo.vectori_pop_back(self)
    def erase(self, *args): return _fastnlo.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vectori_push_back(self, *args)
    def front(self): return _fastnlo.vectori_front(self)
    def back(self): return _fastnlo.vectori_back(self)
    def assign(self, *args): return _fastnlo.vectori_assign(self, *args)
    def resize(self, *args): return _fastnlo.vectori_resize(self, *args)
    def insert(self, *args): return _fastnlo.vectori_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vectori_reserve(self, *args)
    def capacity(self): return _fastnlo.vectori_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _fastnlo.vectori_swigregister
vectori_swigregister(vectori)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vectors___nonzero__(self)
    def __bool__(self): return _fastnlo.vectors___bool__(self)
    def __len__(self): return _fastnlo.vectors___len__(self)
    def pop(self): return _fastnlo.vectors_pop(self)
    def __getslice__(self, *args): return _fastnlo.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vectors___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vectors_append(self, *args)
    def empty(self): return _fastnlo.vectors_empty(self)
    def size(self): return _fastnlo.vectors_size(self)
    def clear(self): return _fastnlo.vectors_clear(self)
    def swap(self, *args): return _fastnlo.vectors_swap(self, *args)
    def get_allocator(self): return _fastnlo.vectors_get_allocator(self)
    def begin(self): return _fastnlo.vectors_begin(self)
    def end(self): return _fastnlo.vectors_end(self)
    def rbegin(self): return _fastnlo.vectors_rbegin(self)
    def rend(self): return _fastnlo.vectors_rend(self)
    def pop_back(self): return _fastnlo.vectors_pop_back(self)
    def erase(self, *args): return _fastnlo.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vectors_push_back(self, *args)
    def front(self): return _fastnlo.vectors_front(self)
    def back(self): return _fastnlo.vectors_back(self)
    def assign(self, *args): return _fastnlo.vectors_assign(self, *args)
    def resize(self, *args): return _fastnlo.vectors_resize(self, *args)
    def insert(self, *args): return _fastnlo.vectors_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vectors_reserve(self, *args)
    def capacity(self): return _fastnlo.vectors_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _fastnlo.vectors_swigregister
vectors_swigregister(vectors)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vectord___nonzero__(self)
    def __bool__(self): return _fastnlo.vectord___bool__(self)
    def __len__(self): return _fastnlo.vectord___len__(self)
    def pop(self): return _fastnlo.vectord_pop(self)
    def __getslice__(self, *args): return _fastnlo.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vectord___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vectord_append(self, *args)
    def empty(self): return _fastnlo.vectord_empty(self)
    def size(self): return _fastnlo.vectord_size(self)
    def clear(self): return _fastnlo.vectord_clear(self)
    def swap(self, *args): return _fastnlo.vectord_swap(self, *args)
    def get_allocator(self): return _fastnlo.vectord_get_allocator(self)
    def begin(self): return _fastnlo.vectord_begin(self)
    def end(self): return _fastnlo.vectord_end(self)
    def rbegin(self): return _fastnlo.vectord_rbegin(self)
    def rend(self): return _fastnlo.vectord_rend(self)
    def pop_back(self): return _fastnlo.vectord_pop_back(self)
    def erase(self, *args): return _fastnlo.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vectord_push_back(self, *args)
    def front(self): return _fastnlo.vectord_front(self)
    def back(self): return _fastnlo.vectord_back(self)
    def assign(self, *args): return _fastnlo.vectord_assign(self, *args)
    def resize(self, *args): return _fastnlo.vectord_resize(self, *args)
    def insert(self, *args): return _fastnlo.vectord_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vectord_reserve(self, *args)
    def capacity(self): return _fastnlo.vectord_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _fastnlo.vectord_swigregister
vectord_swigregister(vectord)

class vectord2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord2, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vectord2_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vectord2___nonzero__(self)
    def __bool__(self): return _fastnlo.vectord2___bool__(self)
    def __len__(self): return _fastnlo.vectord2___len__(self)
    def pop(self): return _fastnlo.vectord2_pop(self)
    def __getslice__(self, *args): return _fastnlo.vectord2___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vectord2___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vectord2___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vectord2___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vectord2___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vectord2___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vectord2_append(self, *args)
    def empty(self): return _fastnlo.vectord2_empty(self)
    def size(self): return _fastnlo.vectord2_size(self)
    def clear(self): return _fastnlo.vectord2_clear(self)
    def swap(self, *args): return _fastnlo.vectord2_swap(self, *args)
    def get_allocator(self): return _fastnlo.vectord2_get_allocator(self)
    def begin(self): return _fastnlo.vectord2_begin(self)
    def end(self): return _fastnlo.vectord2_end(self)
    def rbegin(self): return _fastnlo.vectord2_rbegin(self)
    def rend(self): return _fastnlo.vectord2_rend(self)
    def pop_back(self): return _fastnlo.vectord2_pop_back(self)
    def erase(self, *args): return _fastnlo.vectord2_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vectord2(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vectord2_push_back(self, *args)
    def front(self): return _fastnlo.vectord2_front(self)
    def back(self): return _fastnlo.vectord2_back(self)
    def assign(self, *args): return _fastnlo.vectord2_assign(self, *args)
    def resize(self, *args): return _fastnlo.vectord2_resize(self, *args)
    def insert(self, *args): return _fastnlo.vectord2_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vectord2_reserve(self, *args)
    def capacity(self): return _fastnlo.vectord2_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vectord2
    __del__ = lambda self : None;
vectord2_swigregister = _fastnlo.vectord2_swigregister
vectord2_swigregister(vectord2)

class pairvector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairvector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairvector, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.pairvector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.pairvector___nonzero__(self)
    def __bool__(self): return _fastnlo.pairvector___bool__(self)
    def __len__(self): return _fastnlo.pairvector___len__(self)
    def pop(self): return _fastnlo.pairvector_pop(self)
    def __getslice__(self, *args): return _fastnlo.pairvector___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.pairvector___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.pairvector___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.pairvector___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.pairvector___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.pairvector___setitem__(self, *args)
    def append(self, *args): return _fastnlo.pairvector_append(self, *args)
    def empty(self): return _fastnlo.pairvector_empty(self)
    def size(self): return _fastnlo.pairvector_size(self)
    def clear(self): return _fastnlo.pairvector_clear(self)
    def swap(self, *args): return _fastnlo.pairvector_swap(self, *args)
    def get_allocator(self): return _fastnlo.pairvector_get_allocator(self)
    def begin(self): return _fastnlo.pairvector_begin(self)
    def end(self): return _fastnlo.pairvector_end(self)
    def rbegin(self): return _fastnlo.pairvector_rbegin(self)
    def rend(self): return _fastnlo.pairvector_rend(self)
    def pop_back(self): return _fastnlo.pairvector_pop_back(self)
    def erase(self, *args): return _fastnlo.pairvector_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_pairvector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.pairvector_push_back(self, *args)
    def front(self): return _fastnlo.pairvector_front(self)
    def back(self): return _fastnlo.pairvector_back(self)
    def assign(self, *args): return _fastnlo.pairvector_assign(self, *args)
    def resize(self, *args): return _fastnlo.pairvector_resize(self, *args)
    def insert(self, *args): return _fastnlo.pairvector_insert(self, *args)
    def reserve(self, *args): return _fastnlo.pairvector_reserve(self, *args)
    def capacity(self): return _fastnlo.pairvector_capacity(self)
    __swig_destroy__ = _fastnlo.delete_pairvector
    __del__ = lambda self : None;
pairvector_swigregister = _fastnlo.pairvector_swigregister
pairvector_swigregister(pairvector)

class pairi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pairi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pairi, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_pairi(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _fastnlo.pairi_first_set
    __swig_getmethods__["first"] = _fastnlo.pairi_first_get
    if _newclass:first = _swig_property(_fastnlo.pairi_first_get, _fastnlo.pairi_first_set)
    __swig_setmethods__["second"] = _fastnlo.pairi_second_set
    __swig_getmethods__["second"] = _fastnlo.pairi_second_get
    if _newclass:second = _swig_property(_fastnlo.pairi_second_get, _fastnlo.pairi_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _fastnlo.delete_pairi
    __del__ = lambda self : None;
pairi_swigregister = _fastnlo.pairi_swigregister
pairi_swigregister(pairi)

class vectorpairi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorpairi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorpairi, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vectorpairi_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vectorpairi___nonzero__(self)
    def __bool__(self): return _fastnlo.vectorpairi___bool__(self)
    def __len__(self): return _fastnlo.vectorpairi___len__(self)
    def pop(self): return _fastnlo.vectorpairi_pop(self)
    def __getslice__(self, *args): return _fastnlo.vectorpairi___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vectorpairi___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vectorpairi___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vectorpairi___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vectorpairi___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vectorpairi___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vectorpairi_append(self, *args)
    def empty(self): return _fastnlo.vectorpairi_empty(self)
    def size(self): return _fastnlo.vectorpairi_size(self)
    def clear(self): return _fastnlo.vectorpairi_clear(self)
    def swap(self, *args): return _fastnlo.vectorpairi_swap(self, *args)
    def get_allocator(self): return _fastnlo.vectorpairi_get_allocator(self)
    def begin(self): return _fastnlo.vectorpairi_begin(self)
    def end(self): return _fastnlo.vectorpairi_end(self)
    def rbegin(self): return _fastnlo.vectorpairi_rbegin(self)
    def rend(self): return _fastnlo.vectorpairi_rend(self)
    def pop_back(self): return _fastnlo.vectorpairi_pop_back(self)
    def erase(self, *args): return _fastnlo.vectorpairi_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vectorpairi(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vectorpairi_push_back(self, *args)
    def front(self): return _fastnlo.vectorpairi_front(self)
    def back(self): return _fastnlo.vectorpairi_back(self)
    def assign(self, *args): return _fastnlo.vectorpairi_assign(self, *args)
    def resize(self, *args): return _fastnlo.vectorpairi_resize(self, *args)
    def insert(self, *args): return _fastnlo.vectorpairi_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vectorpairi_reserve(self, *args)
    def capacity(self): return _fastnlo.vectorpairi_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vectorpairi
    __del__ = lambda self : None;
vectorpairi_swigregister = _fastnlo.vectorpairi_swigregister
vectorpairi_swigregister(vectorpairi)

class vector2pairi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector2pairi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector2pairi, name)
    __repr__ = _swig_repr
    def iterator(self): return _fastnlo.vector2pairi_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _fastnlo.vector2pairi___nonzero__(self)
    def __bool__(self): return _fastnlo.vector2pairi___bool__(self)
    def __len__(self): return _fastnlo.vector2pairi___len__(self)
    def pop(self): return _fastnlo.vector2pairi_pop(self)
    def __getslice__(self, *args): return _fastnlo.vector2pairi___getslice__(self, *args)
    def __setslice__(self, *args): return _fastnlo.vector2pairi___setslice__(self, *args)
    def __delslice__(self, *args): return _fastnlo.vector2pairi___delslice__(self, *args)
    def __delitem__(self, *args): return _fastnlo.vector2pairi___delitem__(self, *args)
    def __getitem__(self, *args): return _fastnlo.vector2pairi___getitem__(self, *args)
    def __setitem__(self, *args): return _fastnlo.vector2pairi___setitem__(self, *args)
    def append(self, *args): return _fastnlo.vector2pairi_append(self, *args)
    def empty(self): return _fastnlo.vector2pairi_empty(self)
    def size(self): return _fastnlo.vector2pairi_size(self)
    def clear(self): return _fastnlo.vector2pairi_clear(self)
    def swap(self, *args): return _fastnlo.vector2pairi_swap(self, *args)
    def get_allocator(self): return _fastnlo.vector2pairi_get_allocator(self)
    def begin(self): return _fastnlo.vector2pairi_begin(self)
    def end(self): return _fastnlo.vector2pairi_end(self)
    def rbegin(self): return _fastnlo.vector2pairi_rbegin(self)
    def rend(self): return _fastnlo.vector2pairi_rend(self)
    def pop_back(self): return _fastnlo.vector2pairi_pop_back(self)
    def erase(self, *args): return _fastnlo.vector2pairi_erase(self, *args)
    def __init__(self, *args): 
        this = _fastnlo.new_vector2pairi(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _fastnlo.vector2pairi_push_back(self, *args)
    def front(self): return _fastnlo.vector2pairi_front(self)
    def back(self): return _fastnlo.vector2pairi_back(self)
    def assign(self, *args): return _fastnlo.vector2pairi_assign(self, *args)
    def resize(self, *args): return _fastnlo.vector2pairi_resize(self, *args)
    def insert(self, *args): return _fastnlo.vector2pairi_insert(self, *args)
    def reserve(self, *args): return _fastnlo.vector2pairi_reserve(self, *args)
    def capacity(self): return _fastnlo.vector2pairi_capacity(self)
    __swig_destroy__ = _fastnlo.delete_vector2pairi
    __del__ = lambda self : None;
vector2pairi_swigregister = _fastnlo.vector2pairi_swigregister
vector2pairi_swigregister(vector2pairi)

DEBUG = _fastnlo.DEBUG
MANUAL = _fastnlo.MANUAL
INFO = _fastnlo.INFO
WARNING = _fastnlo.WARNING
ERROR = _fastnlo.ERROR
SILENT = _fastnlo.SILENT
class speaker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, speaker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, speaker, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_speaker(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fastnlo.delete_speaker
    __del__ = lambda self : None;
    def __add__(self, *args): return _fastnlo.speaker___add__(self, *args)
    def prefix(self, *args): return _fastnlo.speaker_prefix(self, *args)
    def __call__(self, *args): return _fastnlo.speaker___call__(self, *args)
    def PrintMessage(self, *args): return _fastnlo.speaker_PrintMessage(self, *args)
    def DoSpeak(self, *args): return _fastnlo.speaker_DoSpeak(self, *args)
    def GetSpeak(self): return _fastnlo.speaker_GetSpeak(self)
    def SetPrefix(self, *args): return _fastnlo.speaker_SetPrefix(self, *args)
    def GetPrefix(self): return _fastnlo.speaker_GetPrefix(self)
    def SetClassName(self, *args): return _fastnlo.speaker_SetClassName(self, *args)
    def GetClassName(self): return _fastnlo.speaker_GetClassName(self)
    def GetVolume(self): return _fastnlo.speaker_GetVolume(self)
    def SetVolume(self, *args): return _fastnlo.speaker_SetVolume(self, *args)
    __swig_getmethods__["SetGlobalVerbosity"] = lambda x: _fastnlo.speaker_SetGlobalVerbosity
    if _newclass:SetGlobalVerbosity = staticmethod(_fastnlo.speaker_SetGlobalVerbosity)
    __swig_getmethods__["ErrorToErrStream"] = lambda x: _fastnlo.speaker_ErrorToErrStream
    if _newclass:ErrorToErrStream = staticmethod(_fastnlo.speaker_ErrorToErrStream)
speaker_swigregister = _fastnlo.speaker_swigregister
speaker_swigregister(speaker)

def speaker_SetGlobalVerbosity(*args):
  return _fastnlo.speaker_SetGlobalVerbosity(*args)
speaker_SetGlobalVerbosity = _fastnlo.speaker_SetGlobalVerbosity

def speaker_ErrorToErrStream(*args):
  return _fastnlo.speaker_ErrorToErrStream(*args)
speaker_ErrorToErrStream = _fastnlo.speaker_ErrorToErrStream


def SetGlobalVerbosity(*args):
  return _fastnlo.SetGlobalVerbosity(*args)
SetGlobalVerbosity = _fastnlo.SetGlobalVerbosity
class PrimalScream(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PrimalScream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PrimalScream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_PrimalScream(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetClassName(self, *args): return _fastnlo.PrimalScream_SetClassName(self, *args)
    def SetVerbosity(self, *args): return _fastnlo.PrimalScream_SetVerbosity(self, *args)
    __swig_setmethods__["debug"] = _fastnlo.PrimalScream_debug_set
    __swig_getmethods__["debug"] = _fastnlo.PrimalScream_debug_get
    if _newclass:debug = _swig_property(_fastnlo.PrimalScream_debug_get, _fastnlo.PrimalScream_debug_set)
    __swig_setmethods__["man"] = _fastnlo.PrimalScream_man_set
    __swig_getmethods__["man"] = _fastnlo.PrimalScream_man_get
    if _newclass:man = _swig_property(_fastnlo.PrimalScream_man_get, _fastnlo.PrimalScream_man_set)
    __swig_setmethods__["info"] = _fastnlo.PrimalScream_info_set
    __swig_getmethods__["info"] = _fastnlo.PrimalScream_info_get
    if _newclass:info = _swig_property(_fastnlo.PrimalScream_info_get, _fastnlo.PrimalScream_info_set)
    __swig_setmethods__["warn"] = _fastnlo.PrimalScream_warn_set
    __swig_getmethods__["warn"] = _fastnlo.PrimalScream_warn_get
    if _newclass:warn = _swig_property(_fastnlo.PrimalScream_warn_get, _fastnlo.PrimalScream_warn_set)
    __swig_setmethods__["error"] = _fastnlo.PrimalScream_error_set
    __swig_getmethods__["error"] = _fastnlo.PrimalScream_error_get
    if _newclass:error = _swig_property(_fastnlo.PrimalScream_error_get, _fastnlo.PrimalScream_error_set)
    __swig_setmethods__["shout"] = _fastnlo.PrimalScream_shout_set
    __swig_getmethods__["shout"] = _fastnlo.PrimalScream_shout_get
    if _newclass:shout = _swig_property(_fastnlo.PrimalScream_shout_get, _fastnlo.PrimalScream_shout_set)
    __swig_setmethods__["yell"] = _fastnlo.PrimalScream_yell_set
    __swig_getmethods__["yell"] = _fastnlo.PrimalScream_yell_get
    if _newclass:yell = _swig_property(_fastnlo.PrimalScream_yell_get, _fastnlo.PrimalScream_yell_set)
    __swig_destroy__ = _fastnlo.delete_PrimalScream
    __del__ = lambda self : None;
PrimalScream_swigregister = _fastnlo.PrimalScream_swigregister
PrimalScream_swigregister(PrimalScream)
cvar = _fastnlo.cvar

class fastNLOPDFLinearCombinations(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOPDFLinearCombinations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOPDFLinearCombinations, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _fastnlo.new_fastNLOPDFLinearCombinations()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fastnlo.delete_fastNLOPDFLinearCombinations
    __del__ = lambda self : None;
    def CalcPDFLinearCombination(self, *args): return _fastnlo.fastNLOPDFLinearCombinations_CalcPDFLinearCombination(self, *args)
fastNLOPDFLinearCombinations_swigregister = _fastnlo.fastNLOPDFLinearCombinations_swigregister
fastNLOPDFLinearCombinations_swigregister(fastNLOPDFLinearCombinations)

FNLO_NAME = _fastnlo.FNLO_NAME
FNLO_SUBPROJECT = _fastnlo.FNLO_SUBPROJECT
FNLO_VERSION = _fastnlo.FNLO_VERSION
FNLO_GITREV = _fastnlo.FNLO_GITREV
FNLO_AUTHORS = _fastnlo.FNLO_AUTHORS
FNLO_WEBPAGE = _fastnlo.FNLO_WEBPAGE
FNLO_AUTHORSv14 = _fastnlo.FNLO_AUTHORSv14
FNLO_QUOTEv14 = _fastnlo.FNLO_QUOTEv14
FNLO_AUTHORSv2 = _fastnlo.FNLO_AUTHORSv2
FNLO_QUOTEv2 = _fastnlo.FNLO_QUOTEv2
FNLO_YEARS = _fastnlo.FNLO_YEARS
PDG_MU = _fastnlo.PDG_MU
PDG_MD = _fastnlo.PDG_MD
PDG_MS = _fastnlo.PDG_MS
PDG_MC = _fastnlo.PDG_MC
PDG_MB = _fastnlo.PDG_MB
PDG_MT = _fastnlo.PDG_MT
PDG_MZ = _fastnlo.PDG_MZ
PDG_ASMZ = _fastnlo.PDG_ASMZ
kMuR = _fastnlo.kMuR
kMuF = _fastnlo.kMuF
kScale1 = _fastnlo.kScale1
kScale2 = _fastnlo.kScale2
kQuadraticSum = _fastnlo.kQuadraticSum
kQuadraticMean = _fastnlo.kQuadraticMean
kQuadraticSumOver4 = _fastnlo.kQuadraticSumOver4
kLinearMean = _fastnlo.kLinearMean
kLinearSum = _fastnlo.kLinearSum
kScaleMax = _fastnlo.kScaleMax
kScaleMin = _fastnlo.kScaleMin
kProd = _fastnlo.kProd
kS2plusS1half = _fastnlo.kS2plusS1half
kPow4Sum = _fastnlo.kPow4Sum
kWgtAvg = _fastnlo.kWgtAvg
kS2plusS1fourth = _fastnlo.kS2plusS1fourth
kExpProd2 = _fastnlo.kExpProd2
kExtern = _fastnlo.kExtern
kConst = _fastnlo.kConst
kFixedOrder = _fastnlo.kFixedOrder
kThresholdCorrection = _fastnlo.kThresholdCorrection
kElectroWeakCorrection = _fastnlo.kElectroWeakCorrection
kNonPerturbativeCorrection = _fastnlo.kNonPerturbativeCorrection
kContactInteraction = _fastnlo.kContactInteraction
kLeading = _fastnlo.kLeading
kNextToLeading = _fastnlo.kNextToLeading
kNextToNextToLeading = _fastnlo.kNextToNextToLeading
kAbsoluteUnits = _fastnlo.kAbsoluteUnits
kPublicationUnits = _fastnlo.kPublicationUnits
kScaleNone = _fastnlo.kScaleNone
kSymmetricTwoPoint = _fastnlo.kSymmetricTwoPoint
kAsymmetricSixPoint = _fastnlo.kAsymmetricSixPoint
kPDFNone = _fastnlo.kPDFNone
kLHAPDF6 = _fastnlo.kLHAPDF6
kHessianSymmetric = _fastnlo.kHessianSymmetric
kHessianAsymmetric = _fastnlo.kHessianAsymmetric
kHessianAsymmetricMax = _fastnlo.kHessianAsymmetricMax
kHessianCTEQCL68 = _fastnlo.kHessianCTEQCL68
kMCSampling = _fastnlo.kMCSampling
kHeraPDF10 = _fastnlo.kHeraPDF10
kAsNone = _fastnlo.kAsNone
kAsGRV = _fastnlo.kAsGRV
kMerge = _fastnlo.kMerge
kAdd = _fastnlo.kAdd
kUnweighted = _fastnlo.kUnweighted
kAttach = _fastnlo.kAttach
kNumEvent = _fastnlo.kNumEvent
kNumEventBinProc = _fastnlo.kNumEventBinProc
kSumW2 = _fastnlo.kSumW2
kSumW2BinProc = _fastnlo.kSumW2BinProc
kSumSig2 = _fastnlo.kSumSig2
kSumSig2BinProc = _fastnlo.kSumSig2BinProc
kSumUser = _fastnlo.kSumUser
kSumUserBinProc = _fastnlo.kSumUserBinProc
kMedian = _fastnlo.kMedian
kMean = _fastnlo.kMean
kUndefined = _fastnlo.kUndefined
class fastNLOTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOTable, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fastnlo.delete_fastNLOTable
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _fastnlo.new_fastNLOTable(*args)
        try: self.this.append(this)
        except: self.this = this
    def ReadTable(self): return _fastnlo.fastNLOTable_ReadTable(self)
    def WriteTable(self, *args): return _fastnlo.fastNLOTable_WriteTable(self, *args)
    def IsCompatible(self, *args): return _fastnlo.fastNLOTable_IsCompatible(self, *args)
    def IsCompatibleScenario(self, *args): return _fastnlo.fastNLOTable_IsCompatibleScenario(self, *args)
    def IsCatenable(self, *args): return _fastnlo.fastNLOTable_IsCatenable(self, *args)
    def IsCatenableScenario(self, *args): return _fastnlo.fastNLOTable_IsCatenableScenario(self, *args)
    def PrintHeader(self, *args): return _fastnlo.fastNLOTable_PrintHeader(self, *args)
    def IsCompatibleHeader(self, *args): return _fastnlo.fastNLOTable_IsCompatibleHeader(self, *args)
    def IsCatenableHeader(self, *args): return _fastnlo.fastNLOTable_IsCatenableHeader(self, *args)
    def GetFilename(self): return _fastnlo.fastNLOTable_GetFilename(self)
    def SetFilename(self, *args): return _fastnlo.fastNLOTable_SetFilename(self, *args)
    def GetItabversion(self): return _fastnlo.fastNLOTable_GetItabversion(self)
    def SetItabversion(self, *args): return _fastnlo.fastNLOTable_SetItabversion(self, *args)
    def GetScenName(self): return _fastnlo.fastNLOTable_GetScenName(self)
    def SetScenName(self, *args): return _fastnlo.fastNLOTable_SetScenName(self, *args)
    def GetNmult(self): return _fastnlo.fastNLOTable_GetNmult(self)
    def GetNcontrib(self): return _fastnlo.fastNLOTable_GetNcontrib(self)
    def GetNdata(self): return _fastnlo.fastNLOTable_GetNdata(self)
    def GetOutputPrecision(self): return _fastnlo.fastNLOTable_GetOutputPrecision(self)
    def SetOutputPrecision(self, *args): return _fastnlo.fastNLOTable_SetOutputPrecision(self, *args)
    def GetNumDiffBin(self): return _fastnlo.fastNLOTable_GetNumDiffBin(self)
    def GetObsBinLoBound(self, *args): return _fastnlo.fastNLOTable_GetObsBinLoBound(self, *args)
    def GetObsBinUpBound(self, *args): return _fastnlo.fastNLOTable_GetObsBinUpBound(self, *args)
    def GetObsBinsLoBounds(self, *args): return _fastnlo.fastNLOTable_GetObsBinsLoBounds(self, *args)
    def GetObsBinsUpBounds(self, *args): return _fastnlo.fastNLOTable_GetObsBinsUpBounds(self, *args)
    def GetObsBinsLoBoundsMin(self, *args): return _fastnlo.fastNLOTable_GetObsBinsLoBoundsMin(self, *args)
    def GetObsBinsUpBoundsMax(self, *args): return _fastnlo.fastNLOTable_GetObsBinsUpBoundsMax(self, *args)
    def GetObsBinsBounds(self, *args): return _fastnlo.fastNLOTable_GetObsBinsBounds(self, *args)
    def GetObsBinNumber(self, *args): return _fastnlo.fastNLOTable_GetObsBinNumber(self, *args)
    def GetDim0BinBounds(self): return _fastnlo.fastNLOTable_GetDim0BinBounds(self)
    def GetDim1BinBounds(self, *args): return _fastnlo.fastNLOTable_GetDim1BinBounds(self, *args)
    def GetDim2BinBounds(self, *args): return _fastnlo.fastNLOTable_GetDim2BinBounds(self, *args)
    def GetObsBinDimBounds(self, *args): return _fastnlo.fastNLOTable_GetObsBinDimBounds(self, *args)
    def GetIDim0Bin(self, *args): return _fastnlo.fastNLOTable_GetIDim0Bin(self, *args)
    def GetIDim1Bin(self, *args): return _fastnlo.fastNLOTable_GetIDim1Bin(self, *args)
    def GetIDim2Bin(self, *args): return _fastnlo.fastNLOTable_GetIDim2Bin(self, *args)
    def GetNDim0Bins(self): return _fastnlo.fastNLOTable_GetNDim0Bins(self)
    def GetNDim1Bins(self, *args): return _fastnlo.fastNLOTable_GetNDim1Bins(self, *args)
    def GetNDim2Bins(self, *args): return _fastnlo.fastNLOTable_GetNDim2Bins(self, *args)
    def GetODim0Bin(self, *args): return _fastnlo.fastNLOTable_GetODim0Bin(self, *args)
    def GetODim1Bin(self, *args): return _fastnlo.fastNLOTable_GetODim1Bin(self, *args)
    def GetODim2Bin(self, *args): return _fastnlo.fastNLOTable_GetODim2Bin(self, *args)
    def GetIDiffBin(self, *args): return _fastnlo.fastNLOTable_GetIDiffBin(self, *args)
    def GetDimLabels(self): return _fastnlo.fastNLOTable_GetDimLabels(self)
    def GetDimLabel(self, *args): return _fastnlo.fastNLOTable_GetDimLabel(self, *args)
    def GetINormFlag(self): return _fastnlo.fastNLOTable_GetINormFlag(self)
    def IsNorm(self): return _fastnlo.fastNLOTable_IsNorm(self)
    def GetDenomTable(self): return _fastnlo.fastNLOTable_GetDenomTable(self)
    def GetScDescr(self): return _fastnlo.fastNLOTable_GetScDescr(self)
    def SetScDescr(self, *args): return _fastnlo.fastNLOTable_SetScDescr(self, *args)
    def GetIpublunits(self): return _fastnlo.fastNLOTable_GetIpublunits(self)
    def SetIpublunits(self, *args): return _fastnlo.fastNLOTable_SetIpublunits(self, *args)
    def GetEcms(self): return _fastnlo.fastNLOTable_GetEcms(self)
    def SetEcms(self, *args): return _fastnlo.fastNLOTable_SetEcms(self, *args)
    def GetLoOrder(self): return _fastnlo.fastNLOTable_GetLoOrder(self)
    def SetLoOrder(self, *args): return _fastnlo.fastNLOTable_SetLoOrder(self, *args)
    def GetNObsBin(self): return _fastnlo.fastNLOTable_GetNObsBin(self)
    def SetNObsBin(self, *args): return _fastnlo.fastNLOTable_SetNObsBin(self, *args)
    def GetBins(self): return _fastnlo.fastNLOTable_GetBins(self)
    def SetBins(self, *args): return _fastnlo.fastNLOTable_SetBins(self, *args)
    def GetBinSize(self, *args): return _fastnlo.fastNLOTable_GetBinSize(self, *args)
    def SetBinSize(self, *args): return _fastnlo.fastNLOTable_SetBinSize(self, *args)
    def EraseBinFromTable(self, *args): return _fastnlo.fastNLOTable_EraseBinFromTable(self, *args)
    def MultiplyBinInTable(self, *args): return _fastnlo.fastNLOTable_MultiplyBinInTable(self, *args)
    def MultiplyBinSize(self, *args): return _fastnlo.fastNLOTable_MultiplyBinSize(self, *args)
    def CatBinToTable(self, *args): return _fastnlo.fastNLOTable_CatBinToTable(self, *args)
    def CatBin(self, *args): return _fastnlo.fastNLOTable_CatBin(self, *args)
    def GetRivetId(self): return _fastnlo.fastNLOTable_GetRivetId(self)
    def GetXSDescr(self): return _fastnlo.fastNLOTable_GetXSDescr(self)
    def SetDimLabel(self, *args): return _fastnlo.fastNLOTable_SetDimLabel(self, *args)
    def SetNumDiffBin(self, *args): return _fastnlo.fastNLOTable_SetNumDiffBin(self, *args)
    def PrintTableInfo(self, iprint = 0): return _fastnlo.fastNLOTable_PrintTableInfo(self, iprint)
    def PrintContributionSummary(self, *args): return _fastnlo.fastNLOTable_PrintContributionSummary(self, *args)
    def PrintFastNLOTableConstants(self, iprint = 0): return _fastnlo.fastNLOTable_PrintFastNLOTableConstants(self, iprint)
    def PrintScenario(self, *args): return _fastnlo.fastNLOTable_PrintScenario(self, *args)
    def Print(self, *args): return _fastnlo.fastNLOTable_Print(self, *args)
    def MergeTable(self, *args): return _fastnlo.fastNLOTable_MergeTable(self, *args)
    def MergeTables(self, *args): return _fastnlo.fastNLOTable_MergeTables(self, *args)
    def AddTable(self, *args): return _fastnlo.fastNLOTable_AddTable(self, *args)
    def SetUserWeights(self, *args): return _fastnlo.fastNLOTable_SetUserWeights(self, *args)
    def DeleteAllCoeffTable(self): return _fastnlo.fastNLOTable_DeleteAllCoeffTable(self)
    def CreateCoeffTable(self, *args): return _fastnlo.fastNLOTable_CreateCoeffTable(self, *args)
    def CatenateTable(self, *args): return _fastnlo.fastNLOTable_CatenateTable(self, *args)
    def GetCoeffTable(self, *args): return _fastnlo.fastNLOTable_GetCoeffTable(self, *args)
    def GetDataTable(self): return _fastnlo.fastNLOTable_GetDataTable(self)
    def GetReferenceTable(self, *args): return _fastnlo.fastNLOTable_GetReferenceTable(self, *args)
fastNLOTable_swigregister = _fastnlo.fastNLOTable_swigregister
fastNLOTable_swigregister(fastNLOTable)
TWOPI = cvar.TWOPI
TWOPISQR = cvar.TWOPISQR
TOCL90 = cvar.TOCL90
CompatibleVersions = cvar.CompatibleVersions
tabversion = cvar.tabversion
tablemagicno = cvar.tablemagicno
sep = cvar.sep
_ContrName = cvar._ContrName
_OrdName = cvar._OrdName
_fNSDep = cvar._fNSDep

class XsUncertainty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XsUncertainty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XsUncertainty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xs"] = _fastnlo.XsUncertainty_xs_set
    __swig_getmethods__["xs"] = _fastnlo.XsUncertainty_xs_get
    if _newclass:xs = _swig_property(_fastnlo.XsUncertainty_xs_get, _fastnlo.XsUncertainty_xs_set)
    __swig_setmethods__["dxsl"] = _fastnlo.XsUncertainty_dxsl_set
    __swig_getmethods__["dxsl"] = _fastnlo.XsUncertainty_dxsl_get
    if _newclass:dxsl = _swig_property(_fastnlo.XsUncertainty_dxsl_get, _fastnlo.XsUncertainty_dxsl_set)
    __swig_setmethods__["dxsu"] = _fastnlo.XsUncertainty_dxsu_set
    __swig_getmethods__["dxsu"] = _fastnlo.XsUncertainty_dxsu_get
    if _newclass:dxsu = _swig_property(_fastnlo.XsUncertainty_dxsu_get, _fastnlo.XsUncertainty_dxsu_set)
    def __init__(self): 
        this = _fastnlo.new_XsUncertainty()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fastnlo.delete_XsUncertainty
    __del__ = lambda self : None;
XsUncertainty_swigregister = _fastnlo.XsUncertainty_swigregister
XsUncertainty_swigregister(XsUncertainty)

class fastNLOReader(fastNLOTable,fastNLOPDFLinearCombinations):
    __swig_setmethods__ = {}
    for _s in [fastNLOTable,fastNLOPDFLinearCombinations]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOReader, name, value)
    __swig_getmethods__ = {}
    for _s in [fastNLOTable,fastNLOPDFLinearCombinations]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOReader, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastnlo.delete_fastNLOReader
    __del__ = lambda self : None;
    def SetFilename(self, *args): return _fastnlo.fastNLOReader_SetFilename(self, *args)
    def InitScalevariation(self): return _fastnlo.fastNLOReader_InitScalevariation(self)
    def SetUnits(self, *args): return _fastnlo.fastNLOReader_SetUnits(self, *args)
    def SetContributionON(self, *args): return _fastnlo.fastNLOReader_SetContributionON(self, *args)
    def ActivateContribution(self, *args): return _fastnlo.fastNLOReader_ActivateContribution(self, *args)
    def ContrId(self, *args): return _fastnlo.fastNLOReader_ContrId(self, *args)
    def SetCoefficientUsageDefault(self): return _fastnlo.fastNLOReader_SetCoefficientUsageDefault(self)
    def GetIsFlexibleScaleTable(self, ctest = None): return _fastnlo.fastNLOReader_GetIsFlexibleScaleTable(self, ctest)
    def SelectProcesses(self, *args): return _fastnlo.fastNLOReader_SelectProcesses(self, *args)
    def SetCalculateSingleSubprocessOnly(self, *args): return _fastnlo.fastNLOReader_SetCalculateSingleSubprocessOnly(self, *args)
    def SetCalculateSubprocesses(self, *args): return _fastnlo.fastNLOReader_SetCalculateSubprocesses(self, *args)
    def SetNewSqrtS(self, *args): return _fastnlo.fastNLOReader_SetNewSqrtS(self, *args)
    def SetMuRFunctionalForm(self, *args): return _fastnlo.fastNLOReader_SetMuRFunctionalForm(self, *args)
    def SetMuFFunctionalForm(self, *args): return _fastnlo.fastNLOReader_SetMuFFunctionalForm(self, *args)
    def SetFunctionalForm(self, *args): return _fastnlo.fastNLOReader_SetFunctionalForm(self, *args)
    def SetScaleFactorsMuRMuF(self, *args): return _fastnlo.fastNLOReader_SetScaleFactorsMuRMuF(self, *args)
    def SetExternalFuncForMuR(self, *args): return _fastnlo.fastNLOReader_SetExternalFuncForMuR(self, *args)
    def SetExternalFuncForMuF(self, *args): return _fastnlo.fastNLOReader_SetExternalFuncForMuF(self, *args)
    def SetExternalConstantForMuR(self, *args): return _fastnlo.fastNLOReader_SetExternalConstantForMuR(self, *args)
    def SetExternalConstantForMuF(self, *args): return _fastnlo.fastNLOReader_SetExternalConstantForMuF(self, *args)
    def UseHoppetScaleVariations(self, *args): return _fastnlo.fastNLOReader_UseHoppetScaleVariations(self, *args)
    def FillPDFCache(self, chksum = 0., lForce = False): return _fastnlo.fastNLOReader_FillPDFCache(self, chksum, lForce)
    def GetXFXSqrtS(self, *args): return _fastnlo.fastNLOReader_GetXFXSqrtS(self, *args)
    def GetXFX(self, *args): return _fastnlo.fastNLOReader_GetXFX(self, *args)
    def InitPDF(self): return _fastnlo.fastNLOReader_InitPDF(self)
    def EvolveAlphas(self, *args): return _fastnlo.fastNLOReader_EvolveAlphas(self, *args)
    def FillAlphasCache(self, lForce = False): return _fastnlo.fastNLOReader_FillAlphasCache(self, lForce)
    def ResetCache(self): return _fastnlo.fastNLOReader_ResetCache(self)
    def CalcCrossSection(self): return _fastnlo.fastNLOReader_CalcCrossSection(self)
    def RescaleCrossSectionUnits(self, *args): return _fastnlo.fastNLOReader_RescaleCrossSectionUnits(self, *args)
    def GetCrossSection(self, *args): return _fastnlo.fastNLOReader_GetCrossSection(self, *args)
    def GetNormCrossSection(self): return _fastnlo.fastNLOReader_GetNormCrossSection(self)
    def GetCrossSection_vs_x1(self): return _fastnlo.fastNLOReader_GetCrossSection_vs_x1(self)
    def GetCrossSection_vs_x2(self): return _fastnlo.fastNLOReader_GetCrossSection_vs_x2(self)
    def GetReferenceCrossSection(self): return _fastnlo.fastNLOReader_GetReferenceCrossSection(self)
    def GetKFactors(self): return _fastnlo.fastNLOReader_GetKFactors(self)
    def GetQScales(self): return _fastnlo.fastNLOReader_GetQScales(self)
    def GetCrossSection2Dim(self): return _fastnlo.fastNLOReader_GetCrossSection2Dim(self)
    def GetScaleUncertainty(self, *args): return _fastnlo.fastNLOReader_GetScaleUncertainty(self, *args)
    def GetScaleUncertaintyVec(self, *args): return _fastnlo.fastNLOReader_GetScaleUncertaintyVec(self, *args)
    def GetMuRFunctionalForm(self): return _fastnlo.fastNLOReader_GetMuRFunctionalForm(self)
    def GetMuFFunctionalForm(self): return _fastnlo.fastNLOReader_GetMuFFunctionalForm(self)
    def GetUnits(self): return _fastnlo.fastNLOReader_GetUnits(self)
    def GetExternalFuncForMuR(self): return _fastnlo.fastNLOReader_GetExternalFuncForMuR(self)
    def GetExternalFuncForMuF(self): return _fastnlo.fastNLOReader_GetExternalFuncForMuF(self)
    __swig_setmethods__["fConst_MuR"] = _fastnlo.fastNLOReader_fConst_MuR_set
    __swig_getmethods__["fConst_MuR"] = _fastnlo.fastNLOReader_fConst_MuR_get
    if _newclass:fConst_MuR = _swig_property(_fastnlo.fastNLOReader_fConst_MuR_get, _fastnlo.fastNLOReader_fConst_MuR_set)
    __swig_setmethods__["fConst_MuF"] = _fastnlo.fastNLOReader_fConst_MuF_set
    __swig_getmethods__["fConst_MuF"] = _fastnlo.fastNLOReader_fConst_MuF_get
    if _newclass:fConst_MuF = _swig_property(_fastnlo.fastNLOReader_fConst_MuF_get, _fastnlo.fastNLOReader_fConst_MuF_set)
    def GetScaleFactorMuR(self): return _fastnlo.fastNLOReader_GetScaleFactorMuR(self)
    def GetScaleFactorMuF(self): return _fastnlo.fastNLOReader_GetScaleFactorMuF(self)
    def GetScaleVariation(self): return _fastnlo.fastNLOReader_GetScaleVariation(self)
    def GetScaleDescription(self, *args): return _fastnlo.fastNLOReader_GetScaleDescription(self, *args)
    def GetNevt(self, *args): return _fastnlo.fastNLOReader_GetNevt(self, *args)
    def GetNSubproc(self, *args): return _fastnlo.fastNLOReader_GetNSubproc(self, *args)
    def GetSubprocIndices(self, *args): return _fastnlo.fastNLOReader_GetSubprocIndices(self, *args)
    def GetNScaleVariations(self): return _fastnlo.fastNLOReader_GetNScaleVariations(self)
    def GetScaleFactors(self): return _fastnlo.fastNLOReader_GetScaleFactors(self)
    def Print(self, *args): return _fastnlo.fastNLOReader_Print(self, *args)
    def PrintContributionSummary(self, *args): return _fastnlo.fastNLOReader_PrintContributionSummary(self, *args)
    def PrintCrossSections(self): return _fastnlo.fastNLOReader_PrintCrossSections(self)
    def PrintCrossSectionsWithReference(self): return _fastnlo.fastNLOReader_PrintCrossSectionsWithReference(self)
    def PrintTableInfo(self, iprint = 0): return _fastnlo.fastNLOReader_PrintTableInfo(self, iprint)
    def PrintFastNLOTableConstants(self, iprint = 2): return _fastnlo.fastNLOReader_PrintFastNLOTableConstants(self, iprint)
    def PrintCrossSectionsData(self): return _fastnlo.fastNLOReader_PrintCrossSectionsData(self)
    def PrintCrossSectionsDefault(self, *args): return _fastnlo.fastNLOReader_PrintCrossSectionsDefault(self, *args)
    def RunFastNLODemo(self): return _fastnlo.fastNLOReader_RunFastNLODemo(self)
    def TestXFX(self): return _fastnlo.fastNLOReader_TestXFX(self)
    def TestAlphas(self): return _fastnlo.fastNLOReader_TestAlphas(self)
fastNLOReader_swigregister = _fastnlo.fastNLOReader_swigregister
fastNLOReader_swigregister(fastNLOReader)

class fastNLOLHAPDF(fastNLOReader):
    __swig_setmethods__ = {}
    for _s in [fastNLOReader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOLHAPDF, name, value)
    __swig_getmethods__ = {}
    for _s in [fastNLOReader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOLHAPDF, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _fastnlo.delete_fastNLOLHAPDF
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _fastnlo.new_fastNLOLHAPDF(*args)
        try: self.this.append(this)
        except: self.this = this
    def InitEvolveAlphas(self): return _fastnlo.fastNLOLHAPDF_InitEvolveAlphas(self)
    def SetMz(self, *args): return _fastnlo.fastNLOLHAPDF_SetMz(self, *args)
    def SetNFlavor(self, *args): return _fastnlo.fastNLOLHAPDF_SetNFlavor(self, *args)
    def SetNLoop(self, *args): return _fastnlo.fastNLOLHAPDF_SetNLoop(self, *args)
    def SetAlphasMz(self, *args): return _fastnlo.fastNLOLHAPDF_SetAlphasMz(self, *args)
    def SetQMass(self, *args): return _fastnlo.fastNLOLHAPDF_SetQMass(self, *args)
    def SetLHAPDFFilename(self, *args): return _fastnlo.fastNLOLHAPDF_SetLHAPDFFilename(self, *args)
    def SetLHAPDFMember(self, *args): return _fastnlo.fastNLOLHAPDF_SetLHAPDFMember(self, *args)
    def GetLHAPDFFilename(self): return _fastnlo.fastNLOLHAPDF_GetLHAPDFFilename(self)
    def GetIPDFMember(self): return _fastnlo.fastNLOLHAPDF_GetIPDFMember(self)
    def GetNPDFMembers(self): return _fastnlo.fastNLOLHAPDF_GetNPDFMembers(self)
    def GetNPDFMaxMember(self): return _fastnlo.fastNLOLHAPDF_GetNPDFMaxMember(self)
    def PrintPDFInformation(self): return _fastnlo.fastNLOLHAPDF_PrintPDFInformation(self)
    def GetQMass(self, *args): return _fastnlo.fastNLOLHAPDF_GetQMass(self, *args)
    def GetNLoop(self): return _fastnlo.fastNLOLHAPDF_GetNLoop(self)
    def GetNFlavor(self): return _fastnlo.fastNLOLHAPDF_GetNFlavor(self)
    def GetAlphasMz(self): return _fastnlo.fastNLOLHAPDF_GetAlphasMz(self)
    def GetAsUncertainty(self, *args): return _fastnlo.fastNLOLHAPDF_GetAsUncertainty(self, *args)
    def GetAsUncertaintyVec(self, *args): return _fastnlo.fastNLOLHAPDF_GetAsUncertaintyVec(self, *args)
    def GetPDFUncertainty(self, *args): return _fastnlo.fastNLOLHAPDF_GetPDFUncertainty(self, *args)
    def GetPDFUncertaintyVec(self, *args): return _fastnlo.fastNLOLHAPDF_GetPDFUncertaintyVec(self, *args)
    def EvolveAlphas(self, *args): return _fastnlo.fastNLOLHAPDF_EvolveAlphas(self, *args)
    def InitPDF(self): return _fastnlo.fastNLOLHAPDF_InitPDF(self)
    def GetXFX(self, *args): return _fastnlo.fastNLOLHAPDF_GetXFX(self, *args)
fastNLOLHAPDF_swigregister = _fastnlo.fastNLOLHAPDF_swigregister
fastNLOLHAPDF_swigregister(fastNLOLHAPDF)

class fastNLOAlphas(fastNLOLHAPDF):
    __swig_setmethods__ = {}
    for _s in [fastNLOLHAPDF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOAlphas, name, value)
    __swig_getmethods__ = {}
    for _s in [fastNLOLHAPDF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOAlphas, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_fastNLOAlphas(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetMz(self, *args): return _fastnlo.fastNLOAlphas_SetMz(self, *args)
    def SetNFlavor(self, *args): return _fastnlo.fastNLOAlphas_SetNFlavor(self, *args)
    def SetNLoop(self, *args): return _fastnlo.fastNLOAlphas_SetNLoop(self, *args)
    def SetAlphasMz(self, *args): return _fastnlo.fastNLOAlphas_SetAlphasMz(self, *args)
    def GetAlphasMz(self): return _fastnlo.fastNLOAlphas_GetAlphasMz(self)
    def SetGRVtoPDG2012_2loop(self): return _fastnlo.fastNLOAlphas_SetGRVtoPDG2012_2loop(self)
    __swig_destroy__ = _fastnlo.delete_fastNLOAlphas
    __del__ = lambda self : None;
fastNLOAlphas_swigregister = _fastnlo.fastNLOAlphas_swigregister
fastNLOAlphas_swigregister(fastNLOAlphas)

class fastNLOCRunDec(fastNLOLHAPDF):
    __swig_setmethods__ = {}
    for _s in [fastNLOLHAPDF]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fastNLOCRunDec, name, value)
    __swig_getmethods__ = {}
    for _s in [fastNLOLHAPDF]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fastNLOCRunDec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_fastNLOCRunDec(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetMz(self, *args): return _fastnlo.fastNLOCRunDec_SetMz(self, *args)
    def SetNFlavor(self, *args): return _fastnlo.fastNLOCRunDec_SetNFlavor(self, *args)
    def SetNLoop(self, *args): return _fastnlo.fastNLOCRunDec_SetNLoop(self, *args)
    def SetQMass(self, *args): return _fastnlo.fastNLOCRunDec_SetQMass(self, *args)
    def SetAlphasMz(self, *args): return _fastnlo.fastNLOCRunDec_SetAlphasMz(self, *args)
    def SetLHAPDFValues(self): return _fastnlo.fastNLOCRunDec_SetLHAPDFValues(self)
    def SetPDGValues(self): return _fastnlo.fastNLOCRunDec_SetPDGValues(self)
    def GetMz(self): return _fastnlo.fastNLOCRunDec_GetMz(self)
    def GetQMass(self, *args): return _fastnlo.fastNLOCRunDec_GetQMass(self, *args)
    def GetNFlavor(self): return _fastnlo.fastNLOCRunDec_GetNFlavor(self)
    def GetNLoop(self): return _fastnlo.fastNLOCRunDec_GetNLoop(self)
    def GetAlphasMz(self): return _fastnlo.fastNLOCRunDec_GetAlphasMz(self)
    __swig_destroy__ = _fastnlo.delete_fastNLOCRunDec
    __del__ = lambda self : None;
fastNLOCRunDec_swigregister = _fastnlo.fastNLOCRunDec_swigregister
fastNLOCRunDec_swigregister(fastNLOCRunDec)

class TriplenfMmu(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TriplenfMmu, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TriplenfMmu, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nf"] = _fastnlo.TriplenfMmu_nf_set
    __swig_getmethods__["nf"] = _fastnlo.TriplenfMmu_nf_get
    if _newclass:nf = _swig_property(_fastnlo.TriplenfMmu_nf_get, _fastnlo.TriplenfMmu_nf_set)
    __swig_setmethods__["Mth"] = _fastnlo.TriplenfMmu_Mth_set
    __swig_getmethods__["Mth"] = _fastnlo.TriplenfMmu_Mth_get
    if _newclass:Mth = _swig_property(_fastnlo.TriplenfMmu_Mth_get, _fastnlo.TriplenfMmu_Mth_set)
    __swig_setmethods__["muth"] = _fastnlo.TriplenfMmu_muth_set
    __swig_getmethods__["muth"] = _fastnlo.TriplenfMmu_muth_get
    if _newclass:muth = _swig_property(_fastnlo.TriplenfMmu_muth_get, _fastnlo.TriplenfMmu_muth_set)
    def __init__(self): 
        this = _fastnlo.new_TriplenfMmu()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fastnlo.delete_TriplenfMmu
    __del__ = lambda self : None;
TriplenfMmu_swigregister = _fastnlo.TriplenfMmu_swigregister
TriplenfMmu_swigregister(TriplenfMmu)

class AsmMS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsmMS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsmMS, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Asexact"] = _fastnlo.AsmMS_Asexact_set
    __swig_getmethods__["Asexact"] = _fastnlo.AsmMS_Asexact_get
    if _newclass:Asexact = _swig_property(_fastnlo.AsmMS_Asexact_get, _fastnlo.AsmMS_Asexact_set)
    __swig_setmethods__["mMSexact"] = _fastnlo.AsmMS_mMSexact_set
    __swig_getmethods__["mMSexact"] = _fastnlo.AsmMS_mMSexact_get
    if _newclass:mMSexact = _swig_property(_fastnlo.AsmMS_mMSexact_get, _fastnlo.AsmMS_mMSexact_set)
    def __init__(self): 
        this = _fastnlo.new_AsmMS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _fastnlo.delete_AsmMS
    __del__ = lambda self : None;
AsmMS_swigregister = _fastnlo.AsmMS_swigregister
AsmMS_swigregister(AsmMS)

class CRunDec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRunDec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRunDec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _fastnlo.new_CRunDec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["mq"] = _fastnlo.CRunDec_mq_set
    __swig_getmethods__["mq"] = _fastnlo.CRunDec_mq_get
    if _newclass:mq = _swig_property(_fastnlo.CRunDec_mq_get, _fastnlo.CRunDec_mq_set)
    __swig_setmethods__["nfMmu"] = _fastnlo.CRunDec_nfMmu_set
    __swig_getmethods__["nfMmu"] = _fastnlo.CRunDec_nfMmu_get
    if _newclass:nfMmu = _swig_property(_fastnlo.CRunDec_nfMmu_get, _fastnlo.CRunDec_nfMmu_set)
    __swig_setmethods__["AM"] = _fastnlo.CRunDec_AM_set
    __swig_getmethods__["AM"] = _fastnlo.CRunDec_AM_get
    if _newclass:AM = _swig_property(_fastnlo.CRunDec_AM_get, _fastnlo.CRunDec_AM_set)
    def GetNf(self): return _fastnlo.CRunDec_GetNf(self)
    def SetNf(self, *args): return _fastnlo.CRunDec_SetNf(self, *args)
    def AlL2AlH(self, *args): return _fastnlo.CRunDec_AlL2AlH(self, *args)
    def AlH2AlL(self, *args): return _fastnlo.CRunDec_AlH2AlL(self, *args)
    def mL2mH(self, *args): return _fastnlo.CRunDec_mL2mH(self, *args)
    def mH2mL(self, *args): return _fastnlo.CRunDec_mH2mL(self, *args)
    def LamExpl(self, *args): return _fastnlo.CRunDec_LamExpl(self, *args)
    def LamImpl(self, *args): return _fastnlo.CRunDec_LamImpl(self, *args)
    def AlphasLam(self, *args): return _fastnlo.CRunDec_AlphasLam(self, *args)
    def AlphasExact(self, *args): return _fastnlo.CRunDec_AlphasExact(self, *args)
    def mMS2mMS(self, *args): return _fastnlo.CRunDec_mMS2mMS(self, *args)
    def AsmMSrunexact(self, *args): return _fastnlo.CRunDec_AsmMSrunexact(self, *args)
    def mMS2mOS(self, *args): return _fastnlo.CRunDec_mMS2mOS(self, *args)
    def mOS2mMS(self, *args): return _fastnlo.CRunDec_mOS2mMS(self, *args)
    def mMS2mSI(self, *args): return _fastnlo.CRunDec_mMS2mSI(self, *args)
    def mRI2mMS(self, *args): return _fastnlo.CRunDec_mRI2mMS(self, *args)
    def mMS2mRGI(self, *args): return _fastnlo.CRunDec_mMS2mRGI(self, *args)
    def mRGI2mMS(self, *args): return _fastnlo.CRunDec_mRGI2mMS(self, *args)
    def mOS2mSI(self, *args): return _fastnlo.CRunDec_mOS2mSI(self, *args)
    def mOS2mMSrun(self, *args): return _fastnlo.CRunDec_mOS2mMSrun(self, *args)
    def mMS2mOSrun(self, *args): return _fastnlo.CRunDec_mMS2mOSrun(self, *args)
    def mMS2mRI(self, *args): return _fastnlo.CRunDec_mMS2mRI(self, *args)
    def mOS2mMSit(self, *args): return _fastnlo.CRunDec_mOS2mMSit(self, *args)
    def mMS2mRGImod(self, *args): return _fastnlo.CRunDec_mMS2mRGImod(self, *args)
    def DecAsDownOS(self, *args): return _fastnlo.CRunDec_DecAsDownOS(self, *args)
    def DecAsUpOS(self, *args): return _fastnlo.CRunDec_DecAsUpOS(self, *args)
    def DecMqUpOS(self, *args): return _fastnlo.CRunDec_DecMqUpOS(self, *args)
    def DecMqDownOS(self, *args): return _fastnlo.CRunDec_DecMqDownOS(self, *args)
    __swig_destroy__ = _fastnlo.delete_CRunDec
    __del__ = lambda self : None;
CRunDec_swigregister = _fastnlo.CRunDec_swigregister
CRunDec_swigregister(CRunDec)

def fSetdydx(*args):
  return _fastnlo.fSetdydx(*args)
fSetdydx = _fastnlo.fSetdydx

def fSetdydxa1(*args):
  return _fastnlo.fSetdydxa1(*args)
fSetdydxa1 = _fastnlo.fSetdydxa1

def fSetdydxM1(*args):
  return _fastnlo.fSetdydxM1(*args)
fSetdydxM1 = _fastnlo.fSetdydxM1

def fSetdydxa2(*args):
  return _fastnlo.fSetdydxa2(*args)
fSetdydxa2 = _fastnlo.fSetdydxa2

def fSetdydxM2(*args):
  return _fastnlo.fSetdydxM2(*args)
fSetdydxM2 = _fastnlo.fSetdydxM2

def fSetdydxa3(*args):
  return _fastnlo.fSetdydxa3(*args)
fSetdydxa3 = _fastnlo.fSetdydxa3

def fSetdydxM3(*args):
  return _fastnlo.fSetdydxM3(*args)
fSetdydxM3 = _fastnlo.fSetdydxM3

def fSetdydxa4(*args):
  return _fastnlo.fSetdydxa4(*args)
fSetdydxa4 = _fastnlo.fSetdydxa4

def fSetdydxM4(*args):
  return _fastnlo.fSetdydxM4(*args)
fSetdydxM4 = _fastnlo.fSetdydxM4

class Alphas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Alphas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Alphas, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _fastnlo.delete_Alphas
    __del__ = lambda self : None;
    __swig_getmethods__["SetMz"] = lambda x: _fastnlo.Alphas_SetMz
    if _newclass:SetMz = staticmethod(_fastnlo.Alphas_SetMz)
    __swig_getmethods__["GetMz"] = lambda x: _fastnlo.Alphas_GetMz
    if _newclass:GetMz = staticmethod(_fastnlo.Alphas_GetMz)
    __swig_getmethods__["SetAlphasMz"] = lambda x: _fastnlo.Alphas_SetAlphasMz
    if _newclass:SetAlphasMz = staticmethod(_fastnlo.Alphas_SetAlphasMz)
    __swig_getmethods__["GetAlphasMz"] = lambda x: _fastnlo.Alphas_GetAlphasMz
    if _newclass:GetAlphasMz = staticmethod(_fastnlo.Alphas_GetAlphasMz)
    __swig_getmethods__["SetNf"] = lambda x: _fastnlo.Alphas_SetNf
    if _newclass:SetNf = staticmethod(_fastnlo.Alphas_SetNf)
    __swig_getmethods__["GetNf"] = lambda x: _fastnlo.Alphas_GetNf
    if _newclass:GetNf = staticmethod(_fastnlo.Alphas_GetNf)
    __swig_getmethods__["SetNLoop"] = lambda x: _fastnlo.Alphas_SetNLoop
    if _newclass:SetNLoop = staticmethod(_fastnlo.Alphas_SetNLoop)
    __swig_getmethods__["GetNLoop"] = lambda x: _fastnlo.Alphas_GetNLoop
    if _newclass:GetNLoop = staticmethod(_fastnlo.Alphas_GetNLoop)
    __swig_getmethods__["SetFlavorMatchingOn"] = lambda x: _fastnlo.Alphas_SetFlavorMatchingOn
    if _newclass:SetFlavorMatchingOn = staticmethod(_fastnlo.Alphas_SetFlavorMatchingOn)
    __swig_getmethods__["GetFlavorMatchingOn"] = lambda x: _fastnlo.Alphas_GetFlavorMatchingOn
    if _newclass:GetFlavorMatchingOn = staticmethod(_fastnlo.Alphas_GetFlavorMatchingOn)
    __swig_getmethods__["SetFlavorMatchingThresholds"] = lambda x: _fastnlo.Alphas_SetFlavorMatchingThresholds
    if _newclass:SetFlavorMatchingThresholds = staticmethod(_fastnlo.Alphas_SetFlavorMatchingThresholds)
    __swig_getmethods__["GetFlavorMatchingThresholds"] = lambda x: _fastnlo.Alphas_GetFlavorMatchingThresholds
    if _newclass:GetFlavorMatchingThresholds = staticmethod(_fastnlo.Alphas_GetFlavorMatchingThresholds)
    __swig_getmethods__["CalcAlphasMu"] = lambda x: _fastnlo.Alphas_CalcAlphasMu
    if _newclass:CalcAlphasMu = staticmethod(_fastnlo.Alphas_CalcAlphasMu)
    __swig_getmethods__["CalcAlphasMuFixedNf"] = lambda x: _fastnlo.Alphas_CalcAlphasMuFixedNf
    if _newclass:CalcAlphasMuFixedNf = staticmethod(_fastnlo.Alphas_CalcAlphasMuFixedNf)
    __swig_getmethods__["CalcNf"] = lambda x: _fastnlo.Alphas_CalcNf
    if _newclass:CalcNf = staticmethod(_fastnlo.Alphas_CalcNf)
    __swig_getmethods__["PrintInfo"] = lambda x: _fastnlo.Alphas_PrintInfo
    if _newclass:PrintInfo = staticmethod(_fastnlo.Alphas_PrintInfo)
    __swig_setmethods__["fMz"] = _fastnlo.Alphas_fMz_set
    __swig_getmethods__["fMz"] = _fastnlo.Alphas_fMz_get
    if _newclass:fMz = _swig_property(_fastnlo.Alphas_fMz_get, _fastnlo.Alphas_fMz_set)
    __swig_setmethods__["fAlphasMz"] = _fastnlo.Alphas_fAlphasMz_set
    __swig_getmethods__["fAlphasMz"] = _fastnlo.Alphas_fAlphasMz_get
    if _newclass:fAlphasMz = _swig_property(_fastnlo.Alphas_fAlphasMz_get, _fastnlo.Alphas_fAlphasMz_set)
    __swig_setmethods__["fNf"] = _fastnlo.Alphas_fNf_set
    __swig_getmethods__["fNf"] = _fastnlo.Alphas_fNf_get
    if _newclass:fNf = _swig_property(_fastnlo.Alphas_fNf_get, _fastnlo.Alphas_fNf_set)
    __swig_setmethods__["fnLoop"] = _fastnlo.Alphas_fnLoop_set
    __swig_getmethods__["fnLoop"] = _fastnlo.Alphas_fnLoop_get
    if _newclass:fnLoop = _swig_property(_fastnlo.Alphas_fnLoop_get, _fastnlo.Alphas_fnLoop_set)
    __swig_setmethods__["bFlavorMatching"] = _fastnlo.Alphas_bFlavorMatching_set
    __swig_getmethods__["bFlavorMatching"] = _fastnlo.Alphas_bFlavorMatching_get
    if _newclass:bFlavorMatching = _swig_property(_fastnlo.Alphas_bFlavorMatching_get, _fastnlo.Alphas_bFlavorMatching_set)
    __swig_setmethods__["fTh"] = _fastnlo.Alphas_fTh_set
    __swig_getmethods__["fTh"] = _fastnlo.Alphas_fTh_get
    if _newclass:fTh = _swig_property(_fastnlo.Alphas_fTh_get, _fastnlo.Alphas_fTh_set)
Alphas_swigregister = _fastnlo.Alphas_swigregister
Alphas_swigregister(Alphas)

def Alphas_SetMz(*args):
  return _fastnlo.Alphas_SetMz(*args)
Alphas_SetMz = _fastnlo.Alphas_SetMz

def Alphas_GetMz():
  return _fastnlo.Alphas_GetMz()
Alphas_GetMz = _fastnlo.Alphas_GetMz

def Alphas_SetAlphasMz(*args):
  return _fastnlo.Alphas_SetAlphasMz(*args)
Alphas_SetAlphasMz = _fastnlo.Alphas_SetAlphasMz

def Alphas_GetAlphasMz():
  return _fastnlo.Alphas_GetAlphasMz()
Alphas_GetAlphasMz = _fastnlo.Alphas_GetAlphasMz

def Alphas_SetNf(*args):
  return _fastnlo.Alphas_SetNf(*args)
Alphas_SetNf = _fastnlo.Alphas_SetNf

def Alphas_GetNf():
  return _fastnlo.Alphas_GetNf()
Alphas_GetNf = _fastnlo.Alphas_GetNf

def Alphas_SetNLoop(*args):
  return _fastnlo.Alphas_SetNLoop(*args)
Alphas_SetNLoop = _fastnlo.Alphas_SetNLoop

def Alphas_GetNLoop():
  return _fastnlo.Alphas_GetNLoop()
Alphas_GetNLoop = _fastnlo.Alphas_GetNLoop

def Alphas_SetFlavorMatchingOn(*args):
  return _fastnlo.Alphas_SetFlavorMatchingOn(*args)
Alphas_SetFlavorMatchingOn = _fastnlo.Alphas_SetFlavorMatchingOn

def Alphas_GetFlavorMatchingOn():
  return _fastnlo.Alphas_GetFlavorMatchingOn()
Alphas_GetFlavorMatchingOn = _fastnlo.Alphas_GetFlavorMatchingOn

def Alphas_SetFlavorMatchingThresholds(*args):
  return _fastnlo.Alphas_SetFlavorMatchingThresholds(*args)
Alphas_SetFlavorMatchingThresholds = _fastnlo.Alphas_SetFlavorMatchingThresholds

def Alphas_GetFlavorMatchingThresholds(*args):
  return _fastnlo.Alphas_GetFlavorMatchingThresholds(*args)
Alphas_GetFlavorMatchingThresholds = _fastnlo.Alphas_GetFlavorMatchingThresholds

def Alphas_CalcAlphasMu(*args):
  return _fastnlo.Alphas_CalcAlphasMu(*args)
Alphas_CalcAlphasMu = _fastnlo.Alphas_CalcAlphasMu

def Alphas_CalcAlphasMuFixedNf(*args):
  return _fastnlo.Alphas_CalcAlphasMuFixedNf(*args)
Alphas_CalcAlphasMuFixedNf = _fastnlo.Alphas_CalcAlphasMuFixedNf

def Alphas_CalcNf(*args):
  return _fastnlo.Alphas_CalcNf(*args)
Alphas_CalcNf = _fastnlo.Alphas_CalcNf

def Alphas_PrintInfo():
  return _fastnlo.Alphas_PrintInfo()
Alphas_PrintInfo = _fastnlo.Alphas_PrintInfo



